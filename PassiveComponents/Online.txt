var progress = import Games/Fishing2/Progress
var topHud = import Games/Fishing2/FishingComponents/HUD
var flyup = new Games/FlyupText
var sprites = import Games/Fishing2/PassiveComponents/Sprites

var root = null
var icon = null
var layer = null
var label = null
var state = null
var timer = null

var x = null
var y = null

var hireling = null
var rod = null


func MakeActiveHire(level)
  ?root ! null
    return
  
  var hirelingFactory = new Games/Fishing2/Hireling
  hireling = hirelingFactory.Make(level)
  var rodFactory = new Games/Fishing2/Rod
  rod = rodFactory.Make(level)

  x = 2+(8*(level%2))
  y = -15+(2*level)

  root = ui.AddPanel()
  root.style = sprites.invisStyle
  root.dock = bottom_left
  root.anchor = bottom_left
  root.w = 1
  root.h = 1
  root.x = x
  root.y = y

  icon = ui.AddAnim(sprites.spriteActive)
  root.Add(icon)
  icon.color = hireling.color
  icon.duration = 35
  icon.anchor = top_left
  icon.pivotX = 0
  icon.pivotY = 0

  layer = icon.AddLayer(sprites.spriteActive2)
  layer.color = rod.lineColor
  layer.pivotX = 2
  layer.pivotY = 0

  label = ui.AddText()
  root.Add(label)
  label.anchor = top_left
  label.x = 6
  label.y = 2
  label.color = #white // FIXME: hireling.color #rainbow text doesnt work
  label.text = te.xt("x"+progress.hirelings[level])

func MakeNewHire(level)
  // passive checks if active exists, this only if not
  // make a new active hireling
  // run new hire animation
  // --> spriteArrive, spriteJump, spriteWalk
  //    1. walk from left side, down to bank
  //    2. jump in water, and walk into place
  //    3. "arrive" + pull out rod
  //    4. float off down river if being replaced (jump frame 3)
  MakeActiveHire(level)

func UpdateTimer()
  var min = hireling.minWaitTime / progress.hirelings[hireling.level]
  var max = hireling.maxWaitTime / progress.hirelings[hireling.level]
  var n = min + rng % (max - min + 1)
  timer = time + n

func CatchFish()
  play cross_deadwood_row
  var fish = new Games/Fishing2/FishingComponents/FishFactory
  fish = fish.MakeFish(rod.minFish, rod.maxFish)
  flyup.Show(x, screen.h+y, string.Format(te.xt(tid_fish_scales), fish.scales))
  progress.AddScales(fish.scales)
  topHud.Update()

func Update(gameState)
  ?state = null
    UpdateTimer()
    state = waiting
  :?state = waiting
    ?time >= timer
      icon.Play()
      state = catch1
      timer = time + 30
  :?state = catch1
    ?time >= timer
      CatchFish()
      state = catch2
      timer = time + 30
  :?state = catch2
    ?gameState ! Shop
      flyup.Update()
    ?time >= timer
      icon.frame = 0
      UpdateTimer()
      state = waiting

  