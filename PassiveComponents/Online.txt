var progress = import Games/Fishing2/Progress
var topHud = import Games/Fishing2/FishingComponents/HUD
var flyup = new Games/FlyupText
var common = import Games/Fishing2/PassiveComponents/Common

var root = null
var hirelingAnim = null
var label = null

var state = null
var timer = null

var collectedScales = 0.0

var hireling = null

func MakeActiveHire(level, activeRoot)
  ?root ! null
    return

  // Create rod and hireling
  var hirelingFactory = new Games/Fishing2/Hireling
  hireling = hirelingFactory.Make(level)

  // Create root 
  root = ui.AddPanel()
  activeRoot.Add(root)
  root.style = common.invisStyle
  root.dock = top_center
  root.anchor = top_center
  root.w = 1
  root.h = 1

  // Create label
  label = ui.AddText()
  activeRoot.Add(label)
  label.anchor = top_left
  label.color = #888888
  label.text = te.xt("x"+progress.hirelings[level])

  // From hireling level: set xy (anim & label), create new copy of anim
  ?level >= 4
    root.x = -22 - 5*(level-4)
    root.y = 5
    label.x = root.x + 3
    label.y = root.y + 3
    hirelingAnim = new Games/Fishing2/PassiveComponents/HirelingSeated
  :?level >= 1
    root.x = -10 - 10*(level-1)
    root.y = 20 + 2*((level-1)%2)
    label.x = root.x + 5
    label.y = root.y
    hirelingAnim = new Games/Fishing2/PassiveComponents/HirelingCanoe
  :
    root.x = 2
    root.y = 16
    label.x = root.x + 2
    label.y = root.y + 3
    hirelingAnim = new Games/Fishing2/PassiveComponents/HirelingFall
  // Pass hireling root and color to animation
  hirelingAnim.root = root
  hirelingAnim.animColor = hireling.color
  // Init hireling animation
  hirelingAnim.InitActive()

func UpdateTimer()
  // Update catch timer with rng from hireling level
  var min = hireling.GetMinWaitTime()
  var max = hireling.GetMaxWaitTime()
  var n = min + rng % (max - min + 1)
  timer = time + n

func CollectScales()
  play cross_deadwood_row
  // Create new fish for catch from rod level
  // var fish = new Games/Fishing2/FishingComponents/FishFactory
  // fish = fish.MakeFish(rod.minFish, rod.maxFish)
  var scales = math.FloorToInt(collectedScales)
  collectedScales = collectedScales - scales // remainder
  // Create flyup for scales gained from catch
  flyup.Show(root.absoluteX-3, root.absoluteY, string.Format(te.xt(tid_fish_scales), scales))
  // Update progress & HUD with scales
  progress.AddScales(scales)
  topHud.Update()

func Update(gameState)
  // Update Scales
  ?time % 30 = 0
    collectedScales = collectedScales + hireling.GetScalesPerSecond()
  // Initial state "null"
  ?state = null
    UpdateTimer()
    hirelingAnim.RecycleNewHire()
    state = waiting
  :?state = waiting
    ?time >= timer
      hirelingAnim.PlayActive()
      state = catch1
      timer = time + 30
  :?state = catch1
    ?time >= timer
      CollectScales()
      state = catch2
      timer = time + 30
  :?state = catch2
    ?gameState ! Shop
      flyup.Update()
    ?time >= timer
      hirelingAnim.ResetActive()
      UpdateTimer()
      state = waiting
  // Special state "newhire" given by passive.txt when hireling 
  // was just purchased from shop, then wait for shop to be closed 
  :?state = newhire & gameState ! Shop
    hirelingAnim.NewHireUpdate()
    ?hirelingAnim.state = done
      state = null

  