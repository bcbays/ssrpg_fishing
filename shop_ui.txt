//FIXME: progress.txt
var scales = 1000000000
var debug = false
var currentRodLevel = 0
// hirelings of all colors
var currentHirelings = [0, 0, 0, 0, 0, 0, 0]
// end of FIXME

// config

var currencyGlyph = "♠"
var shopPanelSpeed = 2

// arrays will be replaced with `new` components

var levelColors = [
  "white",
  "cyan",
  "yellow",
  "green",
  "blue",
  "red",
  "rainbow",
]

var rodCosts = [
  0,        // white rod cost 
  100,      // cyan rod cost 
  1000,     // yellow rod cost 
  10000,    // green rod cost 
  100000,   // blue rod cost 
  1000000,  // red rod cost 
  10000000, // rainbow rod cost 
]


var hirelingCosts = [
  80,   // white hireling cost
  160,  // cyan hireling cost 
  320,  // yellow hireling cost 
  640,  // green hireling cost 
  1280, // blue hireling cost 
  2560, // red hireling cost 
  5120, // rainbow hireling cost 
]

var hirelingLimits = [
  5, // white hireling limit
  5, // cyan hireling limit 
  5, // yellow hireling limit 
  5, // green hireling limit 
  5, // blue hireling limit 
  5, // red hireling limit 
  5, // rainbow hireling limit 
]

var hireCostFactor = 0.05 // 5%

// end of config

var rodSprite = ascii
#
#####,
####/;
###/´
##/!
asciiend

var hireSprite = ascii
#
##_{)
#''¯)
###/(
asciiend

var shopKeepSprite = ascii
##_▄_  ,  ,──────────────────────────.
###O  /; <  Ahoy t' me shop!          \
##(|`/´   \ Spend yer scales on loot… /
##/ /!     `─────────────────────────´
asciiend

var itemStyle = ui.AddStyle("
^#─#
^│#│
^#─#")

var invisStyle = ui.AddStyle("
^###
^###
^###")

var buttonStyle = ui.AddStyle("
^┌─┐
^│#│
^└─┘")

var shopPanelOvershoot = true
var shopIsHidden = true

var purchaseFailedTimer = null
var purchaseFailedLabel = null

var shopRoot = null
var rowsPanel = null
var rodsRow = null
var hirelingsRow = null
var placeholderRow = null

var shopKeepIcon = null

var whiteRodLabel = null
var cyanRodButton = null
var cyanRodLabel = null
var yellowRodButton = null
var yellowRodLabel = null
var greenRodButton = null
var greenRodLabel = null
var blueRodButton = null
var blueRodLabel = null
var redRodButton = null
var redRodLabel = null
var rainbowRodButton = null
var rainbowRodLabel = null

var whiteHireButton = null
var whiteHireCostLabel = null
var whiteHireCountLabel = null
var whiteHireIcon = null
var cyanHireButton = null
var cyanHireCostLabel = null
var cyanHireCountLabel = null
var cyanHireIcon = null
var yellowHireButton = null
var yellowHireCostLabel = null
var yellowHireCountLabel = null
var yellowHireIcon = null
var greenHireButton = null
var greenHireCostLabel = null
var greenHireCountLabel = null
var greenHireIcon = null
var blueHireButton = null
var blueHireCostLabel = null
var blueHireCountLabel = null
var blueHireIcon = null
var redHireButton = null
var redHireCostLabel = null
var redHireCountLabel = null
var redHireIcon = null
var rainbowHireButton = null
var rainbowHireCostLabel = null
var rainbowHireCountLabel = null
var rainbowHireIcon = null

var shopButton = null
var backButton = null

func InitShop()
  ?shopRoot ! null
    return

  trace("InitShop()", null)
    
  shopRoot = ui.AddPanel()
  shopRoot.visible = true
  shopRoot.y = screen.h
  shopRoot.w = screen.w+2
  shopRoot.h = screen.h+2
  
  rowsPanel = ui.AddPanel()
  rowsPanel.visible = true
  rowsPanel.dock = top_center
  rowsPanel.anchor = top_center
  rowsPanel.x = 0
  rowsPanel.y = 6
  rowsPanel.w = 57
  rowsPanel.h = screen.h - 4
  rowsPanel.style = invisStyle
  shopRoot.Add(rowsPanel)

  rodsRow = InitShopRow(0, 0, invisStyle)
  hirelingsRow = InitShopRow(0, 7, invisStyle)
  placeholderRow = InitShopRow(0, 14, invisStyle)
  
  backButton = InitBackButton()

  ?shopKeepIcon = null
    shopKeepIcon = ui.AddAnim(shopKeepSprite)
    shopRoot.Add(shopKeepIcon)
    shopKeepIcon.dock = top_center
    shopKeepIcon.anchor = top_center
    shopKeepIcon.x = -7
    shopKeepIcon.y = 2
    shopKeepIcon.w = 45
    shopKeepIcon.h = 5

  // these will be in a separate module instead of arrays

  var components = null

  components = InitRodCell(0, itemStyle)
  whiteRodLabel = components[0]
  // // white rod doesn't have a button

  components = InitRodCell(1, itemStyle)
  cyanRodLabel = components[0]
  cyanRodButton = components[1]
  
  components = InitRodCell(2, itemStyle)
  yellowRodLabel = components[0]
  yellowRodButton = components[1]

  components = InitRodCell(3, itemStyle)
  greenRodLabel = components[0]
  greenRodButton = components[1]

  components = InitRodCell(4, itemStyle)
  blueRodLabel = components[0]
  blueRodButton = components[1]

  components = InitRodCell(5, itemStyle)
  redRodLabel = components[0]
  redRodButton = components[1]

  components = InitRodCell(6, itemStyle)
  rainbowRodLabel = components[0]
  rainbowRodButton = components[1]

  components = InitHirelingCell(0, BuyWhiteHireling, itemStyle)
  whiteHireCostLabel = components[0]
  whiteHireCountLabel = components[1]
  whiteHireButton = components[2]
  whiteHireIcon = components[3]

  components = InitHirelingCell(1, BuyCyanHireling, itemStyle)
  cyanHireCostLabel = components[0]
  cyanHireCountLabel = components[1]
  cyanHireButton = components[2]
  cyanHireIcon = components[3]
  
  components = InitHirelingCell(2, BuyYellowHireling, itemStyle)
  yellowHireCostLabel = components[0]
  yellowHireCountLabel = components[1]
  yellowHireButton = components[2]
  yellowHireIcon = components[3]

  components = InitHirelingCell(3, BuyGreenHireling, itemStyle)
  greenHireCostLabel = components[0]
  greenHireCountLabel = components[1]
  greenHireButton = components[2]
  greenHireIcon = components[3]

  components = InitHirelingCell(4, BuyBlueHireling, itemStyle)
  blueHireCostLabel = components[0]
  blueHireCountLabel = components[1]
  blueHireButton = components[2]
  blueHireIcon = components[3]

  components = InitHirelingCell(5, BuyRedHireling, itemStyle)
  redHireCostLabel = components[0]
  redHireCountLabel = components[1]
  redHireButton = components[2]
  redHireIcon = components[3]

  components = InitHirelingCell(6, BuyRainbowHireling, itemStyle)  
  rainbowHireCostLabel = components[0]
  rainbowHireCountLabel = components[1]
  rainbowHireButton = components[2]
  rainbowHireIcon = components[3]

func InitShopRow(x, y, style)
  trace("InitShopRow", [x, y, style])

  var row = ui.AddPanel()
  row.x = x
  row.y = y
  row.w = 57
  row.h = 8
  row.dock = top_left
  row.anchor = top_left
  row.color = #808080
  ?style ! null
    row.style = style
  rowsPanel.Add(row)
  return row

func InitRodCell(rodIdx, style)
  trace("InitRodCell", [rodIdx, style])

  var panel = MakeItemPanel(rodIdx * 8, style)
  rodsRow.Add(panel)

  var button = null
  ?rodIdx > 0
    button = MakeItemButton(HandleRodPurchase, style)
    panel.Add(button)
  
  var labelColor = null
  var labelText = null

  ?rodIdx = currentRodLevel
    labelColor = #808080
    labelText = "current"
  :?rodIdx = currentRodLevel + 1
    labelColor = #white
    labelText = FormatCost(rodCosts[rodIdx])
    ?button ! null
      button.visible = true
  :
    labelColor = #808080
    ?rodIdx < currentRodLevel
      labelText = "owned"
    :
      labelText = "?"

  var label = MakeItemLabel(-1, labelText, labelColor)
  panel.Add(label)
  
  var icon = MakeItemIcon(rodSprite, levelColors[rodIdx])
  panel.Add(icon)

  return [label, button]

func InitHirelingCell(hireIdx, handler, style)
  trace("InitHirelingCell", [hireIdx, style])

  var panel = MakeItemPanel(hireIdx * 8, style)
  hirelingsRow.Add(panel)
  var button = MakeItemButton(handler, style)
  panel.Add(button)
  
  var labelColor = null
  var costText = null
  var countText = null

  var currentAmount = currentHirelings[hireIdx]
  var maxAmount = hirelingLimits[hireIdx]
  var baseCost = hirelingCosts[hireIdx]
  var realCost = baseCost + baseCost * hireCostFactor * currentAmount

  ?currentAmount < maxAmount
    labelColor = #white
    costText = FormatCost(realCost)
    countText = currentAmount + "/" + maxAmount
  :
    labelColor = #808080
    costText = ""
    countText = "-MAX-"

  var costLabel = MakeItemLabel(-1, costText, labelColor)
  panel.Add(costLabel)
  var countLabel = MakeItemLabel(-2, countText, labelColor)
  panel.Add(countLabel)
  
  var icon = MakeItemIcon(hireSprite, levelColors[hireIdx])
  panel.Add(icon)

  ?hireIdx > currentRodLevel
    costLabel.visible = false
    countLabel.visible = false
    icon.visible = false
  :?hireIdx = currentRodLevel
    button.visible = true
  
  ?currentAmount >= maxAmount
    costLabel.visible = false
  return [costLabel, countLabel, button, icon]

func MakeItemPanel(x, style)
  var panel = ui.AddPanel()
  panel.ax = left
  panel.dx = left
  panel.x = x
  panel.w = 9
  panel.h = 8
  panel.color = #808080
  ?style ! null
    panel.style = style
  return panel

func MakeItemButton(handler, style)
  var button = ui.AddButton()
  button.w = 9
  button.h = 8
  button.text = ""
  button.SetPressed(handler)
  button.visible = false
  ?style ! null
    button.style = style
  return button

func MakeItemLabel(y, labelText, labelColor)
  var label = ui.AddText(labelText)
  label.dock = bottom_center
  label.anchor = bottom_center
  label.align = center
  label.color = labelColor
  label.w = 7
  label.h = 1
  label.y = y
  return label

func MakeItemIcon(sprite, itemColor)
  var icon = ui.AddAnim(sprite)
  icon.color = "#" + itemColor
  icon.w = 7
  icon.h = 8
  return icon

func FormatCost(cost)
  ?cost = "owned" | cost = "?"
    return cost
  :?cost < math.Pow(10, 3)
    return currencyGlyph + cost
  ?cost < math.Pow(10, 6)
    return currencyGlyph + (cost / math.Pow(10, 3)) + "K"
  :?cost < math.Pow(10, 9)
    return currencyGlyph + (cost / math.Pow(10, 6)) + "M"
  :?cost < math.Pow(10, 12)
    return currencyGlyph + (cost / math.Pow(10, 9)) + "B"

func HandleRodPurchase()
  trace("HandleRodPurchase()", null)

  ?currentRodLevel = 0
    ?BuyRod(cyanRodLabel, cyanRodButton, yellowRodLabel, yellowRodButton)
      UnlockHireling(cyanHireCostLabel, cyanHireCountLabel, cyanHireButton, cyanHireIcon)
  :?currentRodLevel = 1
    ?BuyRod(yellowRodLabel, yellowRodButton, greenRodLabel, greenRodButton)
      UnlockHireling(yellowHireCostLabel, yellowHireCountLabel, yellowHireButton, yellowHireIcon)
  :?currentRodLevel = 2
    ?BuyRod(greenRodLabel, greenRodButton, blueRodLabel, blueRodButton)
      UnlockHireling(greenHireCostLabel, greenHireCountLabel, greenHireButton, greenHireIcon)
  :?currentRodLevel = 3
    ?BuyRod(blueRodLabel, blueRodButton, redRodLabel, redRodButton)
      UnlockHireling(blueHireCostLabel, blueHireCountLabel, blueHireButton, blueHireIcon)
  :?currentRodLevel = 4
    ?BuyRod(redRodLabel, redRodButton, rainbowRodLabel, rainbowRodButton)
      UnlockHireling(redHireCostLabel, redHireCountLabel, redHireButton, redHireIcon)
  :?currentRodLevel = 5
    ?BuyRod(rainbowRodLabel, rainbowRodButton, null, null)
      UnlockHireling(rainbowHireCostLabel, rainbowHireCountLabel, rainbowHireButton, rainbowHireIcon)

func BuyRod(label, button, nextLabel, nextButton)
  trace("BuyRod", [label, button, nextLabel, nextButton])

  var cost = 0
  ?currentRodLevel < rodCosts.Count() - 2
    cost = rodCosts[currentRodLevel + 1]

  ?scales >= cost
    play buy
    scales = scales - cost
    currentRodLevel++
    button.visible = false
    label.text = "owned"
    label.color = #808080
    ?nextButton ! null
      nextButton.visible = true
    ?nextCost ! null & nextLabel ! null
      nextLabel.text = FormatCost(rodCosts[currentRodLevel + 1])
      nextLabel.color = #white
    return true
  :
    play error
    label.color = #red
    purchaseFailedTimer = time + 30
    purchaseFailedLabel = label
    return false

func UnlockHireling(costLabel, countLabel, button, icon)
  trace("UnlockHireling", null)
  costLabel.visible = true
  countLabel.visible = true
  button.visible = true
  icon.visible = true

func BuyWhiteHireling()
  return BuyHireling(0, whiteHireCostLabel, whiteHireCountLabel, whiteHireButton, whiteHireIcon)

func BuyCyanHireling()
  return BuyHireling(1, cyanHireCostLabel, cyanHireCountLabel, cyanHireButton, cyanHireIcon)

func BuyYellowHireling()
  return BuyHireling(2, yellowHireCostLabel, yellowHireCountLabel, yellowHireButton, yellowHireIcon)

func BuyGreenHireling()
  return BuyHireling(3, greenHireCostLabel, greenHireCountLabel, greenHireButton, greenHireIcon)

func BuyBlueHireling()
  return BuyHireling(4, blueHireCostLabel, blueHireCountLabel, blueHireButton, blueHireIcon)

func BuyRedHireling()
  return BuyHireling(5, redHireCostLabel, redHireCountLabel, redHireButton, redHireIcon)

func BuyRainbowHireling()
  return BuyHireling(6, rainbowHireCostLabel, rainbowHireCountLabel, rainbowHireButton, rainbowHireIcon)

func BuyHireling(hireIdx, costLabel, countLabel, button, icon)
  trace("BuyHireling", [hireIdx])

  var currentAmount = currentHirelings[hireIdx]
  var maxAmount = hirelingLimits[hireIdx]
  var baseCost = hirelingCosts[hireIdx]
  var realCost = math.RoundToInt(baseCost + baseCost * hireCostFactor * currentAmount)

  ?scales >= realCost
    play buy
    scales = scales - realCost
    currentAmount++
    currentHirelings[hireIdx] = currentAmount
    ?currentAmount = maxAmount
      button.visible = false
      costLabel.visible = false
      countLabel.text = "-MAX-"
      countLabel.color = #808080
    :
      var newCost = math.RoundToInt(realCost + baseCost * hireCostFactor)
      costLabel.text = FormatCost(newCost)
      countLabel.text = currentAmount + "/" + maxAmount
    return true
  :
    play error
    costLabel.color = #red
    purchaseFailedTimer = time + 30
    purchaseFailedLabel = costLabel
    return false

func Update()
  trace("Update()", null)

  ?shopIsHidden

    ?shopButton = null
      shopButton = InitShopButton()

    // hide the "Back" button right away
    ?backButton ! null
      backButton.visible = false

    ?shopRoot ! null
      // start the closing animation
      ?shopRoot.y < screen.h
        shopRoot.y = shopRoot.y + shopPanelSpeed
      :
        // animation is finished, show the "Open" button
        shopButton.visible = true
        enable pause

        shopRoot.y = screen.h
        shopRoot.visible = false
  :
    ?shopRoot = null
      InitShop()

    // hide the "Open" button right away
    ?shopButton ! null
      shopButton.visible = false
    disable pause

    // start the opening animation
    ?shopRoot.y > -3 & shopPanelOvershoot
      shopRoot.y = shopRoot.y - shopPanelSpeed
      shopRoot.visible = true
    :
      // animation is finished, show the "Back" button
      backButton.visible = true

      ?shopRoot.y <= -3 & shopPanelOvershoot
        shopPanelOvershoot = false
      :?shopRoot.y < 0
        shopRoot.y = shopRoot.y + 1
      :
        shopRoot.y = 0

  ?purchaseFailedTimer ! null
    ?time >= purchaseFailedTimer
      purchaseFailedLabel.color = #white
      purchaseFailedTimer = null

func InitShopButton()
  trace("InitShopButton()", null)
  var button = ui.AddButton()
  button.anchor = bottom_right
  button.dock = bottom_right
  button.x = -5
  button.y = -5
  button.text = te.xt("Shop")
  button.style = buttonStyle
  button.SetPressed(OpenShop)
  button.visible = true
  return button
 
func OpenShop()
  trace("OpenShop()", null)
  shopIsHidden = false
  
func InitBackButton()
  trace("InitBackButton()", null)
  var button = ui.AddButton()
  button.anchor = top_center
  button.dock = top_center
  button.x = 20
  button.y = 1
  button.text = te.xt("◀ Back")
  button.style = buttonStyle
  button.SetPressed(CloseShop)
  button.visible = false
  shopRoot.Add(button)
  return button
  
func CloseShop()
  trace("CloseShop()", null)
  shopIsHidden = true
  shopPanelOvershoot = true

// TESTING
disable banner
>`@(screen.w-string.Size(currencyGlyph+scales))/2@,0,@currencyGlyph+scales@ 
var traces = []
var template = "{0}({1})"
func trace(msg, arr)
  ?arr ! null
    var args = ""
    for i=0 .. arr.Count() - 1
      var s = arr[i]
      ?s = null
        s = "null"
      args = args + s + ","
    msg = string.Format(template, msg, args)
  traces.Add(msg)
func ShowTraces()
  var tr = string.Break(string.Join("->", traces), 40)
  var y = 2
  for t : tr
    >`2,@y@,#blue,@t@
    y++
  traces.Clear()
// TESTING END

?loc = Waterfall
  Update()
  ?debug
    ShowTraces()