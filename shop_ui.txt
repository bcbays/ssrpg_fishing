var currencyGlyph = "♠"
var currentRodLevel = 0 //FIXME: progress.txt
var scales = 1000000000 // FIXME
var debug = false

var cyanCost = 100
var yellowCost = 1000
var greenCost = 10000
var blueCost = 100000
var redCost = 1000000
var rainbowCost = 10000000

var rodSpriteA = ascii
#
#####,
####/;
###/´
##/!
asciiend

var invisStyle = ui.AddStyle("
^###
^###
^###")

var buttonStyle = ui.AddStyle("
^┌─┐
^│#│
^└─┘")

var rowStyle = ui.AddStyle("
^├#┤
^│#│
^└─┘")

var topRowCellStyle = ui.AddStyle("
^┬─┬
^│#│
^┴─┴")

var topRowLastCellStyle = ui.AddStyle("
^┬─┐
^│#│
^┴─┘")

var shopPanelSpeed = 2
var shopPanelOvershoot = true

var shopIsHidden = true

var purchaseFailedTimer = null
var purchaseFailedLabel = null

var shopRoot = null
var rowsPanel = null
var rodsRow = null
var hirelingsRow = null
var placeholderRow = null

var whitePanel = null
var whiteLabel = null

var cyanPanel = null
var cyanButton = null
var cyanLabel = null

var yellowPanel = null
var yellowButton = null
var yellowLabel = null

var greenPanel = null
var greenButton = null
var greenLabel = null

var bluePanel = null
var blueButton = null
var blueLabel = null

var redPanel = null
var redButton = null
var redLabel = null

var rainbowPanel = null
var rainbowButton = null
var rainbowLabel = null

var activeRodButton = null

var shopButton = null
var backButton = null

func InitShop()
  ?shopRoot ! null
    return

  trace("InitShop()", null)
    
  shopRoot = ui.AddPanel()
  shopRoot.visible = true
  shopRoot.y = screen.h
  shopRoot.w = screen.w
  shopRoot.h = screen.h
  
  rowsPanel = ui.AddPanel()
  rowsPanel.visible = true
  rowsPanel.dock = top_left
  rowsPanel.anchor = top_left
  rowsPanel.x = 20
  rowsPanel.y = 1
  rowsPanel.w = screen.w - 21
  rowsPanel.h = screen.h - 4
  rowsPanel.style = invisStyle
  shopRoot.Add(rowsPanel)

  rodsRow = InitShopRow(0, 0, null)
  hirelingsRow = InitShopRow(0, 7, rowStyle)
  placeholderRow = InitShopRow(0, 14, rowStyle)
  
  backButton = InitBackButton()

  // these will be in a separate module

  var components = null

  components = InitRodCell(0, "white", "owned", null)
  whitePanel = components[0]
  whiteLabel = components[1]
  // white rod doesn't have a button

  ?cyanPanel = null
    components = InitRodCell(1, "cyan", cyanCost, topRowCellStyle)
    cyanPanel = components[0]
    cyanLabel = components[1]
    cyanButton = components[2]
  
  ?yellowPanel = null
    components = InitRodCell(2, "yellow", yellowCost, topRowCellStyle)
    yellowPanel = components[0]
    yellowLabel = components[1]
    yellowButton = components[2]

  ?greenPanel = null
    components = InitRodCell(3, "green", greenCost, topRowCellStyle)
    greenPanel = components[0]
    greenLabel = components[1]
    greenButton = components[2]

  ?bluePanel = null
    components = InitRodCell(4, "blue", blueCost, topRowCellStyle)
    bluePanel = components[0]
    blueLabel = components[1]
    blueButton = components[2]

  ?redPanel = null
    components = InitRodCell(5, "red", redCost, topRowCellStyle)
    redPanel = components[0]
    redLabel = components[1]
    redButton = components[2]

  ?rainbowPanel = null
    components = InitRodCell(6, "rainbow", rainbowCost, topRowLastCellStyle)
    rainbowPanel = components[0]
    rainbowLabel = components[1]
    rainbowButton = components[2]

  ?currentRodLevel = 0
    activeRodButton = cyanButton
  :?currentRodLevel = 1
    activeRodButton = yellowButton
  :?currentRodLevel = 2
    activeRodButton = greenButton
  :?currentRodLevel = 3
    activeRodButton = blueButton
  :?currentRodLevel = 4
    activeRodButton = redButton
  :?currentRodLevel = 5
    activeRodButton = rainbowButton

func InitShopRow(x, y, style)
  trace("InitShopRow", [x, y, style])

  var row = ui.AddPanel()
  row.x = x
  row.y = y
  row.w = 57
  row.h = 8
  row.dock = top_left
  row.anchor = top_left
  row.color = #808080
  ?style ! null
    row.style = style
  rowsPanel.Add(row)
  return row

func InitRodCell(rodIdx, rodColor, cost, style)
  trace("InitRodCell", [rodIdx, rodColor, cost, style])

  var panel = ui.AddPanel()
  panel.ax = left
  panel.dx = left
  panel.x = rodIdx * 8
  panel.y = 0
  panel.w = 9
  panel.h = 8
  panel.color = #808080
  ?style ! null
    panel.style = style
  rodsRow.Add(panel)

  var button = null

  ?rodIdx > 0
    button = ui.AddButton()
    button.w = 9
    button.h = 8
    button.text = ""
    button.SetPressed(HandleRodPurchase)
    button.visible = false
    ?style ! null
      button.style = style
    panel.Add(button)
  
  var labelColor = null
  var labelText = null

  ?currentRodLevel = rodIdx - 1
    labelColor = #white
    labelText = FormatCost(cost)
    ?button ! null
      button.visible = true
  :
    labelColor = #808080
    ?currentRodLevel >= rodIdx
      labelText = "owned"
    :
      labelText = "?"

  var label = ui.AddText(labelText)
  label.dock = bottom_center
  label.anchor = bottom_center
  label.align = center
  label.color = labelColor
  label.w = 7
  label.h = 1
  label.x = 0
  label.y = -1
  panel.Add(label)

  var icon = ui.AddAnim(rodSpriteA)
  icon.color = "#" + rodColor
  icon.w = 7
  icon.h = 8
  panel.Add(icon)

  return [panel, label, button]

func FormatCost(cost)
  ?cost = "owned" | cost = "?"
    return cost
  :?cost < math.Pow(10, 3)
    return currencyGlyph + cost
  ?cost < math.Pow(10, 6)
    return currencyGlyph + (cost / math.Pow(10, 3)) + "K"
  :?cost < math.Pow(10, 9)
    return currencyGlyph + (cost / math.Pow(10, 6)) + "M"
  :?cost < math.Pow(10, 12)
    return currencyGlyph + (cost / math.Pow(10, 9)) + "B"

func BuyRod(cost, label, button, nextCost, nextLabel, nextButton)
  trace("BuyRod", [cost, label, button, nextCost, nextLabel, nextButton])

  ?scales >= cost
    play buy
    scales = scales - cost
    currentRodLevel++
    button.visible = false
    label.text = "owned"
    label.color = #808080
    activeRodButton = nextButton
    ?nextButton ! null
      nextButton.visible = true
    ?nextCost ! null & nextLabel ! null
      nextLabel.text = FormatCost(nextCost)
      nextLabel.color = #white
  :
    play error
    label.color = #red
    purchaseFailedTimer = time + 30
    purchaseFailedLabel = label

func HandleRodPurchase()
  trace("HandleRodPurchase()", null)

  ?currentRodLevel = 0
    BuyRod(cyanCost, cyanLabel, cyanButton,
    ^yellowCost, yellowLabel, yellowButton)

  :?currentRodLevel = 1
    BuyRod(yellowCost, yellowLabel, yellowButton,
    ^greenCost, greenLabel, greenButton)

  :?currentRodLevel = 2
    BuyRod(greenCost, greenLabel, greenButton,
    ^blueCost, blueLabel, blueButton)

  :?currentRodLevel = 3
    BuyRod(blueCost, blueLabel, blueButton,
    ^redCost, redLabel, redButton)

  :?currentRodLevel = 4
    BuyRod(redCost, redLabel, redButton,
    ^rainbowCost, rainbowLabel, rainbowButton)

  :?currentRodLevel = 5
    BuyRod(rainbowCost, rainbowLabel, rainbowButton,
    ^null, null, null)

func Update()
  trace("Update()", null)

  ?shopIsHidden

    ?shopButton = null
      shopButton = InitShopButton()

    // hide the "Back" button right away
    ?backButton ! null
      backButton.visible = false

    ?shopRoot ! null
      // start the closing animation
      ?shopRoot.y < screen.h
        shopRoot.y = shopRoot.y + shopPanelSpeed
      :
        // animation is finished, show the "Open" button
        shopButton.visible = true
        enable pause

        shopRoot.y = screen.h
        shopRoot.visible = false
  :
    ?shopRoot = null
      InitShop()

    // hide the "Open" button right away
    ?shopButton ! null
      shopButton.visible = false
    disable pause

    // start the opening animation
    ?shopRoot.y > -3 & shopPanelOvershoot
      shopRoot.y = shopRoot.y - shopPanelSpeed
      shopRoot.visible = true
    :
      // animation is finished, show the "Back" button
      backButton.visible = true

      ?shopRoot.y <= -3 & shopPanelOvershoot
        shopPanelOvershoot = false
      :?shopRoot.y < 0
        shopRoot.y = shopRoot.y + 1
      :
        shopRoot.y = 0

  ?purchaseFailedTimer ! null
    ?time >= purchaseFailedTimer
      purchaseFailedLabel.color = #white
      purchaseFailedTimer = null

func InitShopButton()
  trace("InitShopButton()", null)
  var button = ui.AddButton()
  button.anchor = bottom_right
  button.dock = bottom_right
  button.x = -5
  button.y = -5
  button.text = te.xt("Shop")
  button.style = buttonStyle
  button.SetPressed(OpenShop)
  button.visible = true
  return button
 
func OpenShop()
  trace("OpenShop()", null)
  shopIsHidden = false
  
func InitBackButton()
  trace("InitBackButton()", null)
  var button = ui.AddButton()
  button.anchor = top_left
  button.dock = top_left
  button.x = 1
  button.y = 1
  button.text = te.xt("◀ Back")
  button.style = buttonStyle
  button.SetPressed(CloseShop)
  button.visible = false
  shopRoot.Add(button)
  return button
  
func CloseShop()
  trace("CloseShop()", null)
  shopIsHidden = true
  shopPanelOvershoot = true

// TESTING
disable banner
>@currencyGlyph+scales@ 
var traces = []
var template = "{0}({1})"
func trace(msg, arr)
  ?arr ! null
    var args = ""
    for i=0 .. arr.Count() - 1
      var s = arr[i]
      ?s = null
        s = "null"
      args = args + s + ","
    msg = string.Format(template, msg, args)
  traces.Add(msg)
func ShowTraces()
  var tr = string.Break(string.Join("->", traces), 40)
  var y = 2
  for t : tr
    >`2,@y@,#blue,@t@
    y++
  traces.Clear()
// TESTING END

?loc = Waterfall
  Update()
  ?debug
    ShowTraces()