var utils = import Games/Fishing2/Utils
var fishData = import Games/Fishing2/Data/FishData
var loot = import Games/Fishing2/FishingComponents/FishLootTable

func MakeFish(min, max)
  var fish = new Games/Fishing2/FishingComponents/Fish

  var selectedFish = utils.RngRange(min, max)

  // TODO: Rework loot table system
  var fishIndex = -1
  ?selectedFish >= loot.selMin0 & selectedFish < loot.selMax0
    fishIndex = 0
  :?selectedFish >= loot.selMin1 & selectedFish < loot.selMax1
    fishIndex = 1
  :?selectedFish >= loot.selMin2 & selectedFish < loot.selMax2
    fishIndex = 2
  :?selectedFish >= loot.selMin3 & selectedFish < loot.selMax3
    fishIndex = 3
  :?selectedFish >= loot.selMin4 & selectedFish < loot.selMax4
    fishIndex = 4
  :?selectedFish >= loot.selMin5 & selectedFish < loot.selMax5
    fishIndex = 5
  :?selectedFish >= loot.selMin6 & selectedFish < loot.selMax6
    fishIndex = 6
  :?selectedFish >= loot.selMin7 & selectedFish < loot.selMax7
    fishIndex = 7

  ?fishIndex >= fishData.minIndex & fishIndex <= fishData.maxIndex
    fish.name = fishData.name[fishIndex]
    fish.art = fishData.art[fishIndex]
    fish.rodPivotX = fishData.rodPivot[fishIndex][0]
    fish.rodPivotY = fishData.rodPivot[fishIndex][1]
    fish.acceleration = fishData.acceleration[fishIndex]

    var scalesMin = fishData.scalesRange[fishIndex][0]
    var scalesMax = fishData.scalesRange[fishIndex][1]
    fish.scales = utils.RngRange(scalesMin, scalesMax)
    var weightD = (fish.scales / 10)
    fish.weight = weightD + "." + (fish.scales - weightD * 10)
    //>@fish.scalesMin@, @fish.scalesMax@, @fish.scales@; @weightD@, @fish.weight@
  :
    utils.Panic("Unsupported fish index: " + fishIndex)
  

  return fish
